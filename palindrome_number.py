# -*- coding: utf-8 -*-
"""Palindrome Number.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lWD6I6LgInpI8cShN1udwjCpJpAnTDjS

Given an integer x, return true if x is palindrome integer.

An integer is a palindrome when it reads the same backward as forward.

For example, 121 is a palindrome while 123 is not.
 

Example 1:

Input: x = 121
Output: true
Explanation: 121 reads as 121 from left to right and from right to left.
Example 2:

Input: x = -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.
Example 3:

Input: x = 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.
 

Constraints:

-231 <= x <= 231 - 1
 

Follow up: Could you solve it without converting the integer to a string?
"""

def isPelindrome(x) :
  original = x                              # Creating varibale to store original input value
  final = 0                                 # Creating a variable to store final value
  temp = 0                                  # Creating a temprory variable
  if x >= 0 :                               # Because numbers smaller than 0 cannot be pelindrom so we included this condition
    while x > 0 :                           # Creating a while loop
      temp = x                              # Storing x previous value in temp variable
      x = int(x/10)                         # Divide x by 10 and convert into int, this will give the number except unit position value. Example- x = 123 , so int(x/10) = 12
      final = final*10 + ( temp - x*10 )    # Calculating final for each iteration. Example - x=123, x=int(x/10)-> 3, final=0*10 + (123-12*10) = 3, in next iteration it will be 30+2=32 and so on
    if final == original :                  # Comparing oinal value with original
      return True                           # Return True if condition is true else return false.
  return False